{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../../epicure.json\";\nexport const restaurantSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: data.restaurant,\n    default: data.restaurant\n  },\n  reducers: {\n    mainFilter: (state, action) => {\n      switch (props.sortFilter) {\n        case \"All\":\n          filteredRest = restArray;\n          break;\n        case \"New\":\n          let year = d.getFullYear();\n          for (let i = 0; i < restArray.length; i++) {\n            if (year - restArray[i].openYear === 0) {\n              filteredRest.push(restArray[i]);\n            }\n          }\n          break;\n        case \"Open Now\":\n          let hour = d.getHours();\n          let day = d.getDay();\n          for (let i = 0; i < restArray.length; i++) {\n            if (restArray[i].openHours[0] < hour && hour < restArray[i].openHours[1] && restArray[i].openDays.includes(day)) {\n              open.push(restArray[i]);\n            }\n          }\n          filteredRest = open;\n          break;\n        case \"Most Popular\":\n          let mostPopular1 = restArray.filter(rest => rest.rating.includes(\"5\"));\n          let mostPopular2 = restArray.filter(rest => rest.rating.includes(\"4\"));\n          filteredRest = [...mostPopular1, ...mostPopular2];\n          break;\n        default:\n          filteredRest = restArray;\n          break;\n      }\n    }\n  }\n});\nexport default restaurantSlice.reducer;","map":{"version":3,"names":["createSlice","data","restaurantSlice","name","initialState","value","restaurant","default","reducers","mainFilter","state","action","props","sortFilter","filteredRest","restArray","year","d","getFullYear","i","length","openYear","push","hour","getHours","day","getDay","openHours","openDays","includes","open","mostPopular1","filter","rest","rating","mostPopular2","reducer"],"sources":["C:/Users/erana/Documents/gitHub.io/epicure-project/epicure/src/store/slicer/restaurantSlicer.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../epicure.json\";\r\n\r\nexport const restaurantSlice = createSlice({\r\n  name: \"restaurants\",\r\n  initialState: {\r\n    value: data.restaurant,\r\n    default: data.restaurant\r\n  },\r\n  reducers: {\r\n    mainFilter: (state, action) => {\r\n      switch (props.sortFilter) {\r\n        case \"All\":\r\n          filteredRest = restArray;\r\n          break;\r\n        case \"New\":\r\n          let year = d.getFullYear();\r\n          for (let i = 0; i < restArray.length; i++) {\r\n            if (year - restArray[i].openYear === 0) {\r\n              filteredRest.push(restArray[i]);\r\n            }\r\n          }\r\n          break;\r\n        case \"Open Now\":\r\n          let hour = d.getHours();\r\n          let day = d.getDay();\r\n          for (let i = 0; i < restArray.length; i++) {\r\n            if (\r\n              restArray[i].openHours[0] < hour &&\r\n              hour < restArray[i].openHours[1] &&\r\n              restArray[i].openDays.includes(day)\r\n            ) {\r\n              open.push(restArray[i]);\r\n            }\r\n          }\r\n          filteredRest = open;\r\n          break;\r\n        case \"Most Popular\":\r\n          let mostPopular1 = restArray.filter((rest: any) =>\r\n            rest.rating.includes(\"5\")\r\n          );\r\n          let mostPopular2 = restArray.filter((rest: any) =>\r\n            rest.rating.includes(\"4\")\r\n          );\r\n          filteredRest = [...mostPopular1, ...mostPopular2];\r\n          break;\r\n        default:\r\n          filteredRest = restArray;\r\n          break;\r\n      }\r\n    }\r\n\r\n    \r\n  },\r\n});\r\n\r\nexport default restaurantSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,oBAAoB;AAErC,OAAO,MAAMC,eAAe,GAAGF,WAAW,CAAC;EACzCG,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,KAAK,EAAEJ,IAAI,CAACK,UAAU;IACtBC,OAAO,EAAEN,IAAI,CAACK;EAChB,CAAC;EACDE,QAAQ,EAAE;IACRC,UAAU,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7B,QAAQC,KAAK,CAACC,UAAU;QACtB,KAAK,KAAK;UACRC,YAAY,GAAGC,SAAS;UACxB;QACF,KAAK,KAAK;UACR,IAAIC,IAAI,GAAGC,CAAC,CAACC,WAAW,EAAE;UAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;YACzC,IAAIH,IAAI,GAAGD,SAAS,CAACI,CAAC,CAAC,CAACE,QAAQ,KAAK,CAAC,EAAE;cACtCP,YAAY,CAACQ,IAAI,CAACP,SAAS,CAACI,CAAC,CAAC,CAAC;YACjC;UACF;UACA;QACF,KAAK,UAAU;UACb,IAAII,IAAI,GAAGN,CAAC,CAACO,QAAQ,EAAE;UACvB,IAAIC,GAAG,GAAGR,CAAC,CAACS,MAAM,EAAE;UACpB,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;YACzC,IACEJ,SAAS,CAACI,CAAC,CAAC,CAACQ,SAAS,CAAC,CAAC,CAAC,GAAGJ,IAAI,IAChCA,IAAI,GAAGR,SAAS,CAACI,CAAC,CAAC,CAACQ,SAAS,CAAC,CAAC,CAAC,IAChCZ,SAAS,CAACI,CAAC,CAAC,CAACS,QAAQ,CAACC,QAAQ,CAACJ,GAAG,CAAC,EACnC;cACAK,IAAI,CAACR,IAAI,CAACP,SAAS,CAACI,CAAC,CAAC,CAAC;YACzB;UACF;UACAL,YAAY,GAAGgB,IAAI;UACnB;QACF,KAAK,cAAc;UACjB,IAAIC,YAAY,GAAGhB,SAAS,CAACiB,MAAM,CAAEC,IAAS,IAC5CA,IAAI,CAACC,MAAM,CAACL,QAAQ,CAAC,GAAG,CAAC,CAC1B;UACD,IAAIM,YAAY,GAAGpB,SAAS,CAACiB,MAAM,CAAEC,IAAS,IAC5CA,IAAI,CAACC,MAAM,CAACL,QAAQ,CAAC,GAAG,CAAC,CAC1B;UACDf,YAAY,GAAG,CAAC,GAAGiB,YAAY,EAAE,GAAGI,YAAY,CAAC;UACjD;QACF;UACErB,YAAY,GAAGC,SAAS;UACxB;MAAM;IAEZ;EAGF;AACF,CAAC,CAAC;AAEF,eAAeb,eAAe,CAACkC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}