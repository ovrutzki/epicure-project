{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\erana\\\\Documents\\\\gitHub.io\\\\epicure-project\\\\epicure\\\\src\\\\component\\\\Restaurant\\\\RenderRest\\\\RenderRest.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport data from \"../../../epicure.json\";\nimport Card from \"../../Card/Card\";\nimport { useSelector } from \"react-redux\";\n// import \"./RenderRest.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RenderRest = props => {\n  _s();\n  const restArray = useSelector(state => state.restaurants.value);\n  let filteredRest = [];\n  let open = [];\n  let d = new Date();\n  switch (props.sortFilter) {\n    case \"All\":\n      filteredRest = data.restaurant;\n      break;\n    case 'New':\n      let year = d.getFullYear();\n      for (let i = 0; i < data.restaurant.length; i++) {\n        if (year - data.restaurant[i].openYear === 0) {\n          filteredRest.push(data.restaurant[i]);\n        }\n        ;\n      }\n      break;\n    case \"Open Now\":\n      let hour = d.getHours();\n      let day = d.getDay();\n      for (let i = 0; i < data.restaurant.length; i++) {\n        if (data.restaurant[i].openHours[0] < hour && hour < data.restaurant[i].openHours[1] && data.restaurant[i].openDays.includes(day)) {\n          open.push(data.restaurant[i]);\n        }\n      }\n      ;\n      filteredRest = open;\n      break;\n    case \"Most Popular\":\n      let mostPopular1 = data.restaurant.filter(rest => rest.rating.includes(\"5\"));\n      let mostPopular2 = data.restaurant.filter(rest => rest.rating.includes(\"4\"));\n      filteredRest = [...mostPopular1, ...mostPopular2];\n      break;\n    default:\n      filteredRest = data.restaurant;\n      break;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"restaurant\",\n      children: filteredRest.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        class: card.price ? \"dish\" : \"rest\",\n        img: card.img,\n        name: card.name,\n        icons: card.icons,\n        about: card.about,\n        price: card.price,\n        chef: card.chef,\n        rating: card.rating\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(RenderRest, \"GNYjA39Qo2ufzVsG2jFzx0OalXY=\", false, function () {\n  return [useSelector];\n});\n_c = RenderRest;\nexport default RenderRest;\n\n// case 'Most Popular':\n//     filteredRest === data.restaurant\n//     break;\n// case 'Map View':\n//     filteredRest === data.restaurant\n//     break;\nvar _c;\n$RefreshReg$(_c, \"RenderRest\");","map":{"version":3,"names":["React","data","Card","useSelector","RenderRest","props","restArray","state","restaurants","value","filteredRest","open","d","Date","sortFilter","restaurant","year","getFullYear","i","length","openYear","push","hour","getHours","day","getDay","openHours","openDays","includes","mostPopular1","filter","rest","rating","mostPopular2","map","card","index","price","img","name","icons","about","chef"],"sources":["C:/Users/erana/Documents/gitHub.io/epicure-project/epicure/src/component/Restaurant/RenderRest/RenderRest.tsx"],"sourcesContent":["import React from \"react\";\r\nimport data from \"../../../epicure.json\";\r\nimport { ICard, IRenderRest } from \"../../../interFaces/interFaces\";\r\nimport Card from \"../../Card/Card\";\r\nimport { useSelector } from \"react-redux\";\r\n// import \"./RenderRest.css\";\r\n\r\nconst RenderRest: any = (props: IRenderRest) => {\r\n  const restArray = useSelector(\r\n    (state:any) => state.restaurants.value\r\n  );\r\n  let filteredRest: Array<{}> = []\r\n  let open:Array<any> = []\r\n\r\n    let d = new Date();\r\n    switch (props.sortFilter) {\r\n      case \"All\":\r\n        filteredRest = data.restaurant;\r\n        break;\r\n      case 'New':\r\n        let year = d.getFullYear()\r\n        for (let i = 0; i < data.restaurant.length; i++) {\r\n            if (year - data.restaurant[i].openYear === 0){\r\n                filteredRest.push(data.restaurant[i])\r\n             };}\r\n          break;\r\n      case \"Open Now\":\r\n        let hour = d.getHours();\r\n        let day = d.getDay();\r\n        for (let i = 0; i < data.restaurant.length; i++) {\r\n          if (\r\n            data.restaurant[i].openHours[0] < hour &&\r\n            hour < data.restaurant[i].openHours[1] &&\r\n            data.restaurant[i].openDays.includes(day)\r\n          ){open.push(data.restaurant[i]);}\r\n        };\r\n        filteredRest = open;\r\n        break;\r\n      case \"Most Popular\":\r\n        let mostPopular1 = data.restaurant.filter((rest) => rest.rating.includes(\"5\"))\r\n        let mostPopular2 = data.restaurant.filter((rest) => rest.rating.includes(\"4\"))\r\n        filteredRest = [...mostPopular1 , ...mostPopular2]\r\n        break;\r\n      default:\r\n        filteredRest = data.restaurant;\r\n        break;\r\n    }\r\n  return (\r\n    <>\r\n      <div id=\"restaurant\">\r\n        {filteredRest.map((card: ICard, index: number) => (\r\n          <Card\r\n            class={card.price ? \"dish\" : \"rest\"}\r\n            key={index}\r\n            img={card.img}\r\n            name={card.name}\r\n            icons={card.icons}\r\n            about={card.about}\r\n            price={card.price}\r\n            chef={card.chef}\r\n            rating={card.rating}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RenderRest;\r\n\r\n// case 'Most Popular':\r\n//     filteredRest === data.restaurant\r\n//     break;\r\n// case 'Map View':\r\n//     filteredRest === data.restaurant\r\n//     break;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}