{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\erana\\\\Documents\\\\gitHub.io\\\\epicure-project\\\\epicure\\\\src\\\\component\\\\Restaurant\\\\RenderRest\\\\RenderRest.tsx\";\nimport React from \"react\";\nimport data from '../../../epicure.json';\nimport Card from \"../../Card/Card\";\n// import \"./RenderRest.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RenderRest = props => {\n  const filteredRest = data.restaurant.filter(e => {\n    switch (props.sortFilter) {\n      case 'All':\n        filteredRest === data.restaurant;\n        break;\n      case 'New':\n        filteredRest === data.restaurant;\n        break;\n      case 'Open Now':\n        let d = new Date();\n        let hour = d.getHours;\n        let day = d.getDay;\n        for (let i = 0; i < data.restaurant.length; i++) {\n          if (e.openHours[0] < hour() && hour() < e.openHours[1] && e.openDays.includes(day())) filteredRest.push();\n        }\n        filteredRest === data.restaurant;\n        break;\n      case 'Most Popular':\n        filteredRest === data.restaurant;\n        break;\n      case 'Map View':\n        filteredRest === data.restaurant;\n        break;\n      default:\n        break;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredRest.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        class: card.price ? \"dish\" : \"rest\",\n        img: card.img,\n        name: card.name,\n        icons: card.icons,\n        about: card.about,\n        price: card.price,\n        chef: card.chef,\n        rating: card.rating\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = RenderRest;\nexport default RenderRest;\nvar _c;\n$RefreshReg$(_c, \"RenderRest\");","map":{"version":3,"names":["React","data","Card","RenderRest","props","filteredRest","restaurant","filter","e","sortFilter","d","Date","hour","getHours","day","getDay","i","length","openHours","openDays","includes","push","map","card","index","price","img","name","icons","about","chef","rating"],"sources":["C:/Users/erana/Documents/gitHub.io/epicure-project/epicure/src/component/Restaurant/RenderRest/RenderRest.tsx"],"sourcesContent":["import React from \"react\";\r\nimport data from '../../../epicure.json'\r\nimport { ICard, IRenderRest } from \"../../../interFaces/interFaces\";\r\nimport Card from \"../../Card/Card\";\r\n// import \"./RenderRest.css\";\r\n\r\n\r\nconst RenderRest: React.FC<{}> = (props:IRenderRest) => {\r\n    const filteredRest = data.restaurant.filter(e =>{\r\n        switch (props.sortFilter) {\r\n            case 'All':\r\n                filteredRest === data.restaurant\r\n                break;\r\n            case 'New':\r\n                filteredRest === data.restaurant\r\n                break;\r\n            case 'Open Now':\r\n                let d = new Date()\r\n                let hour = d.getHours\r\n                let day = d.getDay\r\n                for (let i = 0;i < data.restaurant.length; i++){\r\n                    if ((e.openHours[0] <hour() && hour() < e.openHours[1]) && (e.openDays.includes(day())))\r\n                        filteredRest.push()\r\n                }\r\n                filteredRest === data.restaurant\r\n                break;\r\n            case 'Most Popular':\r\n                filteredRest === data.restaurant\r\n                break;\r\n            case 'Map View':\r\n                filteredRest === data.restaurant\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }  )\r\n      return (<>\r\n      <div>\r\n        {filteredRest.map((card: ICard,index:number) =>(\r\n            <Card class={card.price ? \"dish\" : \"rest\"} key={index} img={card.img} name={card.name} icons={card.icons} about={card.about} price={card.price}   chef={card.chef} rating= {card.rating} />\r\n        ))}\r\n      </div>\r\n\r\n        </>\r\n      )\r\n    }\r\n\r\nexport default RenderRest;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,uBAAuB;AAExC,OAAOC,IAAI,MAAM,iBAAiB;AAClC;AAAA;AAAA;AAGA,MAAMC,UAAwB,GAAIC,KAAiB,IAAK;EACpD,MAAMC,YAAY,GAAGJ,IAAI,CAACK,UAAU,CAACC,MAAM,CAACC,CAAC,IAAG;IAC5C,QAAQJ,KAAK,CAACK,UAAU;MACpB,KAAK,KAAK;QACNJ,YAAY,KAAKJ,IAAI,CAACK,UAAU;QAChC;MACJ,KAAK,KAAK;QACND,YAAY,KAAKJ,IAAI,CAACK,UAAU;QAChC;MACJ,KAAK,UAAU;QACX,IAAII,CAAC,GAAG,IAAIC,IAAI,EAAE;QAClB,IAAIC,IAAI,GAAGF,CAAC,CAACG,QAAQ;QACrB,IAAIC,GAAG,GAAGJ,CAAC,CAACK,MAAM;QAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAACA,CAAC,GAAGf,IAAI,CAACK,UAAU,CAACW,MAAM,EAAED,CAAC,EAAE,EAAC;UAC3C,IAAKR,CAAC,CAACU,SAAS,CAAC,CAAC,CAAC,GAAEN,IAAI,EAAE,IAAIA,IAAI,EAAE,GAAGJ,CAAC,CAACU,SAAS,CAAC,CAAC,CAAC,IAAMV,CAAC,CAACW,QAAQ,CAACC,QAAQ,CAACN,GAAG,EAAE,CAAE,EACnFT,YAAY,CAACgB,IAAI,EAAE;QAC3B;QACAhB,YAAY,KAAKJ,IAAI,CAACK,UAAU;QAChC;MACJ,KAAK,cAAc;QACfD,YAAY,KAAKJ,IAAI,CAACK,UAAU;QAChC;MACJ,KAAK,UAAU;QACXD,YAAY,KAAKJ,IAAI,CAACK,UAAU;QAChC;MAEJ;QACI;IAAM;EAElB,CAAC,CAAG;EACF,oBAAQ;IAAA,uBACR;MAAA,UACGD,YAAY,CAACiB,GAAG,CAAC,CAACC,IAAW,EAACC,KAAY,kBACvC,QAAC,IAAI;QAAC,KAAK,EAAED,IAAI,CAACE,KAAK,GAAG,MAAM,GAAG,MAAO;QAAa,GAAG,EAAEF,IAAI,CAACG,GAAI;QAAC,IAAI,EAAEH,IAAI,CAACI,IAAK;QAAC,KAAK,EAAEJ,IAAI,CAACK,KAAM;QAAC,KAAK,EAAEL,IAAI,CAACM,KAAM;QAAC,KAAK,EAAEN,IAAI,CAACE,KAAM;QAAG,IAAI,EAAEF,IAAI,CAACO,IAAK;QAAC,MAAM,EAAGP,IAAI,CAACQ;MAAO,GAAxIP,KAAK;QAAA;QAAA;QAAA;MAAA,QACxD;IAAC;MAAA;MAAA;MAAA;IAAA;EACE,iBAED;AAEP,CAAC;AAAA,KAvCCrB,UAAwB;AAyC9B,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}