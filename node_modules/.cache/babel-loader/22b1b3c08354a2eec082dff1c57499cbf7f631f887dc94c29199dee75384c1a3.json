{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../../epicure.json\";\nexport const restaurantSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: data.restaurant,\n    default: data.restaurant\n  },\n  reducers: {\n    mainFilter: (state, action) => {\n      let d = new Date();\n      let open = [];\n      switch (action.payload) {\n        case \"All\":\n          state.value = state.default;\n          break;\n        case \"New\":\n          let year = d.getFullYear();\n          for (let i = 0; i < state.default.length; i++) {\n            if (year - state.default[i].openYear === 0) {\n              state.value.push(state.default[i]);\n            }\n          }\n          break;\n        case \"Open Now\":\n          let hour = d.getHours();\n          let day = d.getDay();\n          for (let i = 0; i < restArray.length; i++) {\n            if (restArray[i].openHours[0] < hour && hour < restArray[i].openHours[1] && restArray[i].openDays.includes(day)) {\n              open.push(restArray[i]);\n            }\n          }\n          filteredRest = open;\n          break;\n        case \"Most Popular\":\n          let mostPopular1 = restArray.filter(rest => rest.rating.includes(\"5\"));\n          let mostPopular2 = restArray.filter(rest => rest.rating.includes(\"4\"));\n          filteredRest = [...mostPopular1, ...mostPopular2];\n          break;\n        default:\n          filteredRest = restArray;\n          break;\n      }\n    }\n  }\n});\nexport const {\n  mainFilter\n} = restaurantSlice.actions;\nexport default restaurantSlice.reducer;","map":{"version":3,"names":["createSlice","data","restaurantSlice","name","initialState","value","restaurant","default","reducers","mainFilter","state","action","d","Date","open","payload","year","getFullYear","i","length","openYear","push","hour","getHours","day","getDay","restArray","openHours","openDays","includes","filteredRest","mostPopular1","filter","rest","rating","mostPopular2","actions","reducer"],"sources":["C:/Users/erana/Documents/gitHub.io/epicure-project/epicure/src/store/slicer/restaurantSlicer.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../epicure.json\";\r\n\r\nexport const restaurantSlice = createSlice({\r\n  name: \"restaurants\",\r\n  initialState: {\r\n    value: data.restaurant,\r\n    default: data.restaurant\r\n  },\r\n  reducers: {\r\n    mainFilter: (state, action) => {\r\n      let d = new Date();\r\n      let open: Array<any> = [];\r\n\r\n      switch (action.payload){\r\n        case \"All\":\r\n      state.value = state.default ;\r\n      break;\r\n    case \"New\":\r\n      let year = d.getFullYear();\r\n      for (let i = 0; i < state.default.length; i++) {\r\n        if (year - state.default[i].openYear === 0) {\r\n          state.value.push(state.default[i]);\r\n        }\r\n      }\r\n      break;\r\n      case \"Open Now\":\r\n      let hour = d.getHours();\r\n      let day = d.getDay();\r\n      for (let i = 0; i < restArray.length; i++) {\r\n        if (\r\n          restArray[i].openHours[0] < hour &&\r\n          hour < restArray[i].openHours[1] &&\r\n          restArray[i].openDays.includes(day)\r\n        ) {\r\n          open.push(restArray[i]);\r\n        }\r\n      }\r\n      filteredRest = open;\r\n      break;\r\n    case \"Most Popular\":\r\n      let mostPopular1 = restArray.filter((rest: any) =>\r\n        rest.rating.includes(\"5\")\r\n      );\r\n      let mostPopular2 = restArray.filter((rest: any) =>\r\n        rest.rating.includes(\"4\")\r\n      );\r\n      filteredRest = [...mostPopular1, ...mostPopular2];\r\n      break;\r\n    default:\r\n      filteredRest = restArray;\r\n      break;\r\n      }\r\n    }\r\n\r\n    \r\n  },\r\n});\r\n\r\nexport const {mainFilter} = restaurantSlice.actions\r\nexport default restaurantSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,oBAAoB;AAErC,OAAO,MAAMC,eAAe,GAAGF,WAAW,CAAC;EACzCG,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,KAAK,EAAEJ,IAAI,CAACK,UAAU;IACtBC,OAAO,EAAEN,IAAI,CAACK;EAChB,CAAC;EACDE,QAAQ,EAAE;IACRC,UAAU,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7B,IAAIC,CAAC,GAAG,IAAIC,IAAI,EAAE;MAClB,IAAIC,IAAgB,GAAG,EAAE;MAEzB,QAAQH,MAAM,CAACI,OAAO;QACpB,KAAK,KAAK;UACZL,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACH,OAAO;UAC3B;QACF,KAAK,KAAK;UACR,IAAIS,IAAI,GAAGJ,CAAC,CAACK,WAAW,EAAE;UAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,CAACH,OAAO,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;YAC7C,IAAIF,IAAI,GAAGN,KAAK,CAACH,OAAO,CAACW,CAAC,CAAC,CAACE,QAAQ,KAAK,CAAC,EAAE;cAC1CV,KAAK,CAACL,KAAK,CAACgB,IAAI,CAACX,KAAK,CAACH,OAAO,CAACW,CAAC,CAAC,CAAC;YACpC;UACF;UACA;QACA,KAAK,UAAU;UACf,IAAII,IAAI,GAAGV,CAAC,CAACW,QAAQ,EAAE;UACvB,IAAIC,GAAG,GAAGZ,CAAC,CAACa,MAAM,EAAE;UACpB,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,SAAS,CAACP,MAAM,EAAED,CAAC,EAAE,EAAE;YACzC,IACEQ,SAAS,CAACR,CAAC,CAAC,CAACS,SAAS,CAAC,CAAC,CAAC,GAAGL,IAAI,IAChCA,IAAI,GAAGI,SAAS,CAACR,CAAC,CAAC,CAACS,SAAS,CAAC,CAAC,CAAC,IAChCD,SAAS,CAACR,CAAC,CAAC,CAACU,QAAQ,CAACC,QAAQ,CAACL,GAAG,CAAC,EACnC;cACAV,IAAI,CAACO,IAAI,CAACK,SAAS,CAACR,CAAC,CAAC,CAAC;YACzB;UACF;UACAY,YAAY,GAAGhB,IAAI;UACnB;QACF,KAAK,cAAc;UACjB,IAAIiB,YAAY,GAAGL,SAAS,CAACM,MAAM,CAAEC,IAAS,IAC5CA,IAAI,CAACC,MAAM,CAACL,QAAQ,CAAC,GAAG,CAAC,CAC1B;UACD,IAAIM,YAAY,GAAGT,SAAS,CAACM,MAAM,CAAEC,IAAS,IAC5CA,IAAI,CAACC,MAAM,CAACL,QAAQ,CAAC,GAAG,CAAC,CAC1B;UACDC,YAAY,GAAG,CAAC,GAAGC,YAAY,EAAE,GAAGI,YAAY,CAAC;UACjD;QACF;UACEL,YAAY,GAAGJ,SAAS;UACxB;MAAM;IAER;EAGF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAACjB;AAAU,CAAC,GAAGP,eAAe,CAACkC,OAAO;AACnD,eAAelC,eAAe,CAACmC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}