{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../../epicure.json\";\nconst fethRestaurantsData = async () => {\n  const restaurants = [];\n  await fetch(\"http://localhost:8000/api/restaurants\").then(response => response.json()).then(data => {\n    restaurants = data;\n    console.log(restaurants);\n    return restaurants;\n  }).catch(err => {\n    console.log(err.message);\n  });\n};\nexport const restaurantSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: fethRestaurantsData(),\n    default: data.restaurant\n  },\n  reducers: {\n    mainFilter: (state, action) => {\n      let d = new Date();\n      let open = [];\n      switch (action.payload) {\n        case \"All\":\n          state.value = state.default;\n          break;\n        case \"New\":\n          let year = d.getFullYear();\n          state.value = [];\n          for (let i = 0; i < state.default.length; i++) {\n            if (year - state.default[i].openYear === 0) {\n              state.value.push(state.default[i]);\n            }\n          }\n          break;\n        case \"Open Now\":\n          let hour = d.getHours();\n          let day = d.getDay();\n          for (let i = 0; i < state.default.length; i++) {\n            if (state.default[i].openHours[0] < hour && hour < state.default[i].openHours[1] && state.default[i].openDays.includes(day)) {\n              open.push(state.default[i]);\n            }\n          }\n          state.value = open;\n          break;\n        case \"Most Popular\":\n          let mostPopular1 = state.default.filter(rest => rest.rating.includes(\"5\"));\n          let mostPopular2 = state.default.filter(rest => rest.rating.includes(\"4\"));\n          state.value = [...mostPopular1, ...mostPopular2];\n          break;\n        default:\n          state.value = state.default;\n          break;\n      }\n    },\n    ratingFilter: (state, action) => {}\n    // priceFilter: (state,action):void =>{\n    //   for (let i = 0; i < state.default.length; i++) {\n    //     let sum = 0;\n    //     let rest = data.dishes.filter((dish) => dish.restaurantId === i + 1 )\n    //     let price = rest.reduce((accumulator, cornett) => accumulator + cornett.price , sum)\n    //     let avrg = price / rest.length\n    //     if()\n    //   }\n    //  }\n  }\n});\n\nexport const {\n  mainFilter,\n  ratingFilter\n} = restaurantSlice.actions;\nexport default restaurantSlice.reducer;","map":{"version":3,"names":["createSlice","data","fethRestaurantsData","restaurants","fetch","then","response","json","console","log","catch","err","message","restaurantSlice","name","initialState","value","default","restaurant","reducers","mainFilter","state","action","d","Date","open","payload","year","getFullYear","i","length","openYear","push","hour","getHours","day","getDay","openHours","openDays","includes","mostPopular1","filter","rest","rating","mostPopular2","ratingFilter","actions","reducer"],"sources":["C:/Users/erana/Documents/gitHub.io/epicure-project/front/src/store/slicer/restaurantSlicer.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { useState } from \"react\";\r\nimport data from \"../../epicure.json\";\r\n\r\nconst fethRestaurantsData = async () =>{\r\n  const restaurants:Array = [];\r\n  await fetch(\"http://localhost:8000/api/restaurants\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      restaurants = data\r\n      console.log(restaurants);\r\n      return restaurants\r\n    })\r\n    .catch((err) => {\r\n      console.log(err.message);\r\n    });\r\n}\r\n\r\n\r\nexport const restaurantSlice = createSlice({\r\n  name: \"restaurants\",\r\n  initialState: {\r\n    value: fethRestaurantsData(),\r\n    default: data.restaurant\r\n  },\r\n  reducers: {\r\n    mainFilter: (state, action) => {\r\n      let d = new Date();\r\n      let open: Array<any> = [];\r\n\r\n      switch (action.payload){\r\n        case \"All\":\r\n      state.value = state.default ;\r\n      break;\r\n    case \"New\":\r\n      let year = d.getFullYear();\r\n      state.value = []\r\n      for (let i = 0; i < state.default.length; i++) {\r\n        if (year - state.default[i].openYear === 0) {\r\n          state.value.push(state.default[i]);\r\n        }\r\n      }\r\n      break;\r\n      case \"Open Now\":\r\n      let hour = d.getHours();\r\n      let day = d.getDay();\r\n      for (let i = 0; i < state.default.length; i++) {\r\n        if (\r\n          state.default[i].openHours[0] < hour &&\r\n          hour < state.default[i].openHours[1] &&\r\n          state.default[i].openDays.includes(day)\r\n        ) {\r\n          open.push(state.default[i]);\r\n        }\r\n      }\r\n      state.value = open;\r\n      break;\r\n    case \"Most Popular\":\r\n      let mostPopular1 = state.default.filter((rest: any) =>\r\n        rest.rating.includes(\"5\")\r\n      );\r\n      let mostPopular2 = state.default.filter((rest: any) =>\r\n        rest.rating.includes(\"4\")\r\n      );\r\n      state.value = [...mostPopular1, ...mostPopular2];\r\n      break;\r\n    default:\r\n      state.value = state.default;\r\n      break;\r\n      }\r\n    },\r\n    ratingFilter: (state, action) =>{\r\n\r\n\r\n\r\n    }\r\n    // priceFilter: (state,action):void =>{\r\n    //   for (let i = 0; i < state.default.length; i++) {\r\n    //     let sum = 0;\r\n    //     let rest = data.dishes.filter((dish) => dish.restaurantId === i + 1 )\r\n    //     let price = rest.reduce((accumulator, cornett) => accumulator + cornett.price , sum)\r\n    //     let avrg = price / rest.length\r\n    //     if()\r\n    //   }\r\n    //  }\r\n  },\r\n});\r\n\r\nexport const {mainFilter , ratingFilter} = restaurantSlice.actions\r\nexport default restaurantSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}